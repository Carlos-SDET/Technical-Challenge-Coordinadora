# Nombre del workflow que aparecerá en GitHub Actions
name: Test Automation Workflow

# Define cuándo se ejecutará el workflow
on:
  push:
    branches: [ main ]  # Se ejecuta cuando hay un push a main
    paths:
      - 'test-automation/**'  # Solo si hay cambios en esta carpeta

# Los trabajos que ejecutará el workflow
jobs:
  # Nombre del job
  test:
    # Sistema operativo donde se ejecutará
    runs-on: ubuntu-latest
    
    # Pasos del job
    steps:
      # Paso 1: Obtener el código del repositorio
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'  # Versión de Python a usar

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-html playwright pytest-playwright
          playwright install chromium
          cd test-automation
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # Paso 4: Ejecutar pruebas
      - name: Run tests
        run: |
          cd test-automation
          pytest tests/test_pickup.py --html=reports/html_reports/report.html --self-contained-html --capture=tee-sys -v

      # Paso 5: Guardar reporte como artefacto
      - name: Upload test report
        if: always()  # Ejecutar incluso si las pruebas fallan
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: test-automation/reports/html_reports/
          retention-days: 7